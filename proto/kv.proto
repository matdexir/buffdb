syntax = "proto3";

package buffdb.kv;
import 'google/protobuf/any.proto';
import 'google/protobuf/wrappers.proto';

// The service definition for key-value operations.
service Kv {
  // Get a value for a given key.
  rpc Get(stream GetRequest) returns (stream GetResponse);

  // Set a value for a given key. If the key already exists, the value is updated.
  //
  // Returns the key for validation.
  rpc Set(stream SetRequest) returns (stream SetResponse);

  // Delete a value for a given key.
  //
  // Returns the key for validation.
  rpc Delete(stream DeleteRequest) returns (stream DeleteResponse);

  // Determine if all provided keys have the same value.
  //
  // As the keys are streamed, the server returns `false` as soon as it finds two keys with
  // different values. If all keys have the same value, the server returns `true` when the stream
  // ends.
  //
  // Returns `false` if any key is not found.
  rpc Eq(stream EqRequest) returns (google.protobuf.BoolValue);

  // Determine if all provided keys have different values.
  //
  // As the keys are streamed, the server returns `false` as soon as it finds two keys with
  // identical values. If all keys have different values, the server returns `true` when the stream
  // ends.
  //
  // Returns `false` if any key is not found.
  rpc NotEq(stream NotEqRequest) returns (google.protobuf.BoolValue);

  // Begin a new transaction. Returns a transaction ID that must be passed to subsequent operations.
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);

  // Commit a transaction. All operations within the transaction are made permanent.
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse);

  // Rollback a transaction. All operations within the transaction are discarded.
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse);
}

// A request to get a value for a given key.
message GetRequest {
  // The key half of a key-value pair.
  string key = 1;
  // Optional transaction ID. If provided, the operation will be performed within the transaction.
  optional string transaction_id = 2;
}

// A response containing a value for a given key.
message GetResponse {
  // The value half of a key-value pair.
  string value = 1;
}

// A request to set a value for a given key. Updates the value if the key already exists.
message SetRequest {
  // The key half of a key-value pair.
  string key = 1;
  // The value half of the pair, associated with a specific key. Values are not necessarily unique.
  string value = 2;
  // Optional transaction ID. If provided, the operation will be performed within the transaction.
  optional string transaction_id = 3;
}

// A response containing the key for a given key-value pair.
message SetResponse {
  // The key half of a key-value pair.
  string key = 1;
}

// A request to delete a value for a given key.
message DeleteRequest {
  // The key half of a key-value pair.
  string key = 1;
  // Optional transaction ID. If provided, the operation will be performed within the transaction.
  optional string transaction_id = 2;
}

// A response containing the key for a given key-value pair.
message DeleteResponse {
  // The key half of a key-value pair.
  string key = 1;
}

// A request to determine if all provided keys have the same value.
message EqRequest {
  // The key half of a key-value pair.
  string key = 1;
}

// A request to determine if all provided keys have unique values.
message NotEqRequest {
  // The key half of a key-value pair.
  string key = 1;
}

// A request to begin a new transaction.
message BeginTransactionRequest {
  // Whether the transaction should be read-only.
  optional bool read_only = 1;
  // Optional timeout for the transaction in milliseconds.
  optional int32 timeout_ms = 2;
}

// A response containing the transaction ID.
message BeginTransactionResponse {
  // The unique identifier for the transaction.
  string transaction_id = 1;
}

// A request to commit a transaction.
message CommitTransactionRequest {
  // The transaction ID to commit.
  string transaction_id = 1;
}

// A response indicating the result of a commit operation.
message CommitTransactionResponse {
  // Whether the commit was successful.
  bool success = 1;
  // Optional error message if the commit failed.
  optional string error_message = 2;
}

// A request to rollback a transaction.
message RollbackTransactionRequest {
  // The transaction ID to rollback.
  string transaction_id = 1;
}

// A response indicating the result of a rollback operation.
message RollbackTransactionResponse {
  // Whether the rollback was successful.
  bool success = 1;
  // Optional error message if the rollback failed.
  optional string error_message = 2;
}
